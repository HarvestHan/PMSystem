@page "/editpasswordpage"


@using PMSystem.Shared
@using System.ComponentModel.DataAnnotations

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

<MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-width-full" Elevation="0">
    <EditForm Model="@ChangePasswordModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudGrid  Class="align-center" Style="max-width: 800px;">
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="4">
                        <MudPaper Height="20px" Square="true" Class="align-self-center py-4 flex-1" Elevation="0">
                        </MudPaper>
                        <MudPaper Height="78px" Square="true" Class="align-self-center py-4 flex-1" Elevation="0">
                            <MudText Typo="Typo.body1" Align="Align.Center">请输入新密码：</MudText>
                        </MudPaper>
                        <MudPaper Height="70px" Square="true" Class="align-self-center py-4 flex-1" Elevation="0">
                            <MudText Typo="Typo.body1" Align="Align.Center">重复输入密码：</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="8">
                        <MudTextField T="string" Label="请输入新密码" HelperText="请输入6位及以上的密码" Class="mt-3" @bind-Value="@ChangePasswordModel.Password"
                               InputType="@PasswordInput" For="@(() => ChangePasswordModel.Password)" @ref="pwField1"
                               Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick"/>
                        <MudTextField T="string" Label="重复输入密码" HelperText="重复输入新密码" Class="mt-3" @bind-Value="@ChangePasswordModel.ConfirmPassword"
                               InputType="@PasswordInput" For="@(() => ChangePasswordModel.ConfirmPassword)" 
                               Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick"
                               Validation="@(new Func<string, string>(PasswordValidation))"/>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudPaper Class="d-flex align-center flex-grow-1 gap-4" Elevation="0" Height="30px" Square="true">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" OnClick="Edit">确认</MudButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Error" OnClick="Return">返回</MudButton>
                </MudPaper>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            成功修改密码后应能看到相应提示。
        </MudText>
    </MudItem>
</MudGrid>
    </EditForm>
</MudPaper>

@code {
    bool success;
    bool isShow;
    bool IsSame = false;
    MudTextField<string> pwField1;

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("个人信息", href: "/userinfopage"),
        new BreadcrumbItem("修改密码", href: "/editpasswordpage"),
    };

    [Parameter]
    public ChangePasswordModel ChangePasswordModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ChangePasswordModel is null)
            ChangePasswordModel = new ChangePasswordModel();
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    //判断两次输入密码是否匹配
    private string PasswordValidation(string arg)
    {
        if (pwField1.Value != arg || pwField1.Value.Length<6)
        {
            IsSame = false;
            return null;
        }
        else
        {
            IsSame = true;
            return null;
        }
    }

    //"确定"按钮单击事件
    void Edit()
    {
        //将新输入的密码更新至数据库
        ChangePassword(ChangePasswordModel, pwField1.Value);
    }

    async Task ChangePassword(ChangePasswordModel ChangePasswordModel,string rawPassword)
    {
        var result = await AuthService.ChangePassword(ChangePasswordModel);
        if (result.Success && IsSame) 
        {
            Snackbar.Add("成功修改密码！", Severity.Success);
            IsSame = false;
        }
        else
        {
            Snackbar.Add("修改密码失败！", Severity.Error);
        }
    }

    //"返回"按钮单击页面跳转事件
    void Return()
    {
        NavigationManager.NavigateTo("/userinfopage");
    }
}

