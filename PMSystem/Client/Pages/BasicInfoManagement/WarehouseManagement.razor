@page "/warehousemanagement"
@using PMSystem.Shared
@inject IMapper Mapper
@inject IWarehouseService WarehouseService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar SnackBar

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>
<PageTitle>仓库信息管理</PageTitle>

<MudCard>
    <MudCardHeader>
        <MudGrid Class="align-center">
            <MudItem lg="6" sm="12" Class="align-center">
                <MudStack Row="true" Class="align-center">
                    <MudText Typo="Typo.h6">仓库信息管理</MudText>
                    <MudButton Target="_blank" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Warehouse" Color="Color.Info" OnClick="New">添加仓库</MudButton>
                </MudStack>

            </MudItem>
            <MudItem lg="6" sm="12" Class="align-center">
               <MudTextField T="string" Label="请输入您想搜索的内容" Variant="Variant.Outlined" Clearable="true" 
                            AdornmentIcon="@Icons.Filled.Search" Adornment="Adornment.End"
                            @bind-Text="searchText"/>
            </MudItem>
        </MudGrid>       
    </MudCardHeader>


    <MudCardContent>
        @if (WarehouseModels is null || WarehouseModels.Count <= 0)
        {
            <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center">
                当前未建立仓库！
            </MudAlert>
        }
        else
        {
        <MudTable @ref="_table" T="WarehouseModel" Items="@WarehouseModels" Hover="true"
          SortLabel="Sort By" Filter="FilterWarehouse" Breakpoint="Breakpoint.Sm" RowsPerPage="10" LoadingProgressColor="Color.Info"
          Virtualize="true" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<WarehouseModel, object>(x=>x.id)">序号</MudTableSortLabel></MudTh>
                <MudTh>仓库编号</MudTh>
                <MudTh>仓库名称</MudTh>
                <MudTh>负责人</MudTh>
                <MudTh>建库日期</MudTh>
                <MudTh>最大容量（立方米）</MudTh>
                <MudTh>备注</MudTh>
                <MudTh>操作</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="id">@context.id</MudTd>
                <MudTd DataLabel="warehouse_code">@context.warehouse_code</MudTd>
                <MudTd DataLabel="warehouse_name">@context.warehouse_name</MudTd>
                <MudTd DataLabel="principal">@context.principal_.user_name</MudTd>
                <MudTd DataLabel="construct_date">@context.construct_date</MudTd>
                <MudTd DataLabel="capacity">@context.capacity</MudTd>
                <MudTd DataLabel="remark">@context.remark</MudTd>
                <MudTd DataLabel="Operate">
                    <MudStack AlignItems="AlignItems.Center" Row="true">
                        <MudButton Variant="Variant.Filled" OnClick="@(()=>{Edit(context);})" Icon="@Icons.Material.Filled.Edit" Color="Color.Success" Size="@Size.Medium">编辑</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="@(()=>{Delete(context);})" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="@Size.Medium">删除</MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <div class="d-flex flex-column align-center">
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
                </div>
            </PagerContent>
        </MudTable>
        }

    </MudCardContent>
</MudCard>

@code {
    private bool isEmpty = false;
    private bool isLoading = true;
    private List<string> clickedEvents = new();
    private int selectedRowNumber = -1;
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    public string searchText { get; set; }
    private MudTable<WarehouseModel> _table;

    private List<WarehouseModel> WarehouseModels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WarehouseModels = new List<WarehouseModel>();
        await GetWarehouses();
    }

    async Task GetWarehouses()
    {
        var result = await WarehouseService.GetWarehouses();
        if (result.Success)
        {
            WarehouseModels = result.Data;
        }
    }

    private async Task Edit(WarehouseModel warehouseModel)
    {
        WarehouseModel model = Mapper.Map<WarehouseModel>(warehouseModel);
        var parameters = new DialogParameters { ["WarehouseModel"] = model };
        var dialog = DialogService.Show<WarehouseEditPage>("编辑仓库信息", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await WarehouseService.UpdateWarehouse(Mapper.Map<WarehouseModel, UpdateWarehouseModel>(result.Data as WarehouseModel));
            if (response.Success)
                warehouseModel = result.Data as WarehouseModel;
            SnackBar.Add(response.Message, response.Success ? Severity.Success : Severity.Error);
            await GetWarehouses();
            StateHasChanged();
        }
    }

    private async Task New()
    {
        var dialog = DialogService.Show<WarehouseAddPage>("添加仓库");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var apiResult = await WarehouseService.AddWarehouse(Mapper.Map<WarehouseModel, AddWarehouseModel>(result.Data as WarehouseModel));
            if (apiResult.Success)
            {
                SnackBar.Add(apiResult.Message, Severity.Success);
            }
            else
            {
                SnackBar.Add(apiResult.Message, Severity.Error);
            }
            await GetWarehouses();
        }
        StateHasChanged();
    }

    public async void Delete(WarehouseModel e)
    {
        var result = await DialogService.Show<MakeSureDialog>("确认操作").Result;
        if (!result.Cancelled)
        {
            var response = await WarehouseService.DeleteWarehouse(e.id);
            SnackBar.Add(response.Message, response.Success ? Severity.Success : Severity.Error);
        }
        await GetWarehouses();
        StateHasChanged();
    }

    bool FilterWarehouse(WarehouseModel warehouseModel)
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return true;
        if (warehouseModel.warehouse_code.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            return true;
        if (warehouseModel.warehouse_name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private void RowClickEvent(TableRowClickEventArgs<WarehouseModel> tableRowClickEventArgs)
    {
        clickedEvents.Add("Row has been clicked");
    }

    private string SelectedRowClassFunc(WarehouseModel warehouseModel, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (_table.SelectedItem != null && _table.SelectedItem.Equals(warehouseModel))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
