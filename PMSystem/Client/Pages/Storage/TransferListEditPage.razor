@using PMSystem.Client.Dialogs;
@using System.ComponentModel.DataAnnotations
@using PMSystem.Shared

@inject IDialogService DialogService
@inject ITransferListService TransferListService
@inject IUserService UserService
@inject IWarehouseService WarehouseService
@inject IPartsService PartsService
@inject ISnackbar Snackbar

<EditForm Model="@TransferListModel" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem lg="6" md="6" sm="12">
                            <MudTextField T="string" Label="调拨单编号" Required="true" RequiredError="调拨单编号不能为空！" Variant="Variant.Outlined" Disabled="true"
                                          @bind-Value="@TransferListModel.transfer_code" />
                        </MudItem>
                        <MudItem lg="6" md="6" sm="12">
                            <MudDatePicker T="DateTime" Label="调拨日期" Required="true" RequiredError="调拨日期不能为空！" Variant="Variant.Outlined" ReadOnly="true"
                                          @bind-Value="@TransferListModel.transfer_date" />
                        </MudItem>
                        <MudItem lg="12" md="12" sm="12">
                            <MudSelect T="PartsModel" Label="选择零件" Class="mt-3" Required="true" RequiredError="零件不能为空！" Variant="Variant.Outlined"
                                          @bind-Value="@TransferListModel.parts_" AnchorOrigin="Origin.BottomCenter">
                                @foreach(var item in Parts)
                                {
                                    <MudSelectItem T="PartsModel" Value="item" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem lg="12" md="12" sm="12">
                            <MudNumericField Label="调拨数量" Class="mt-3" @bind-Value="@TransferListModel.count" Required="true" RequiredError="调拨数量不能为空！"
                                        Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem lg="12" md="12" sm="12">
                            <MudSelect T="WarehouseModel" Label="选择转出仓库" Class="mt-3" Required="true" RequiredError="转出仓库不能为空！" Variant="Variant.Outlined"
                                          @bind-Value="@TransferListModel.out_warehouse_" AnchorOrigin="Origin.BottomCenter">
                                @foreach(var item in Warehouses)
                                {
                                    <MudSelectItem T="WarehouseModel" Value="item" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem lg="12" md="12" sm="12">
                            <MudSelect T="WarehouseModel" Label="选择转入仓库" Class="mt-3" Required="true" RequiredError="转入仓库不能为空！" Variant="Variant.Outlined"
                                          @bind-Value="@TransferListModel.in_warehouse_" AnchorOrigin="Origin.BottomCenter">
                                @foreach(var item in Warehouses)
                                {
                                    <MudSelectItem T="WarehouseModel" Value="item" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem lg="12" md="12" sm="12">
                            <MudSelect Label="选择处理人" Class="mt-3" Required="true" RequiredError="处理人不能为空！" Variant="Variant.Outlined"
                                          @bind-Value="@TransferListModel.handle_" >
                                @foreach(var item in Users)
                                {
                                    <MudSelectItem T="UserModel" Value="item" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem lg="12" md="12" sm="12">
                            <MudTextField T="string" Label="备注" Class="mt-3" Lines="2" Variant="Variant.Outlined"
                                          @bind-Value="@TransferListModel.remark" />
                        </MudItem>
                        <MudItem lg="12" md="12" sm="12">
                            <MudTextField T="string" Label="审核意见" Class="mt-3" Lines="2" Variant="Variant.Outlined"
                                          @bind-Value="@TransferListModel.suggestion" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    @if ((TransferListModel.transfer_state == PMSystem.Shared.Enums.TransferState.待审核))
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OkClick" Class="ml-auto">同意</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CancelClick" Class="ml-auto">驳回</MudButton>
                    }
                    @if ((TransferListModel.transfer_state == PMSystem.Shared.Enums.TransferState.待修改))
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Submit" Class="ml-auto">提交</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel" Class="ml-auto">取消</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

    @code {
    bool success;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public TransferListModel TransferListModel { get; set; }
    public List<WarehouseModel> Warehouses { get; set; }
    public List<PartsModel> Parts { get; set; }
    public List<UserModel> Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (TransferListModel is null)
            TransferListModel = new TransferListModel();

        await GetAll();
        StateHasChanged();
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
    async Task GetAll()
    {
        await GetWarehouses();
        await Geparts_();
        await GetUsers();
        StateHasChanged();
    }

    async Task GetWarehouses()
    {
        var result = await WarehouseService.GetWarehouses();
        if (result.Success)
        {
            Warehouses = result.Data;
        }
        StateHasChanged();
    }

    async Task Geparts_()
    {
        var result = await PartsService.GetParts();
        if (result.Success)
        {
            Parts = result.Data;
        }
        StateHasChanged();
    }

    async Task GetUsers()
    {
        var result = await UserService.GetUsers();
        if (result.Success)
        {
            Users = result.Data;
        }
        StateHasChanged();
    }

    void OkClick()
    {
        TransferListModel.transfer_state = PMSystem.Shared.Enums.TransferState.待调拨;
        MudDialog.Close(DialogResult.Ok(TransferListModel));
    }

    void CancelClick()
    {
        TransferListModel.transfer_state = PMSystem.Shared.Enums.TransferState.待修改;
        MudDialog.Close(DialogResult.Ok(TransferListModel));
    }

    void Submit()
    {
        TransferListModel.transfer_state = PMSystem.Shared.Enums.TransferState.待审核;
        MudDialog.Close(DialogResult.Ok(TransferListModel));
    }

    void Cancel()
    {
        MudDialog.Close(DialogResult.Ok(TransferListModel));
    }
}
